@When("^cargandobatosOPF \"([^\"]+)\" \"([^\"]+)\" \"([^\"]+)\"$")
public void cargandobatosOPF(String agentName, String nombreArchivo, String varName) throws Exception {

    // ===== 1) Archivos de soporte =====
    Path rutaIds  = Paths.get(System.getProperty("user.dir"), "identificador_generadoXML.txt");        // ids 1..5, uno por línea
    Path rutaNums = Paths.get(System.getProperty("user.dir"), "numeros_formularios_generadoXML.txt");   // numeroDeclaracion, uno por línea

    if (!Files.exists(rutaIds))  throw new Exception("[OPF] Falta identificador_generadoXML.txt: " + rutaIds.toAbsolutePath());
    if (!Files.exists(rutaNums)) throw new Exception("[OPF] Falta numeros_formularios_generadoXML.txt: " + rutaNums.toAbsolutePath());

    // ids: deja solo dígitos por línea
    List<String> ids = Files.readAllLines(rutaIds, StandardCharsets.UTF_8).stream()
            .filter(s -> s != null && !s.isBlank())
            .map(s -> s.replaceAll("[^0-9]", ""))
            .filter(s -> !s.isBlank())
            .collect(Collectors.toList());
    if (ids.isEmpty()) throw new Exception("[OPF] Archivo de IDs vacío.");

    // numerosDeclaracion (no imprescindible para la lógica, pero útil de log/consistencia)
    List<String> numerosDec = Files.readAllLines(rutaNums, StandardCharsets.UTF_8).stream()
            .filter(s -> s != null && !s.isBlank())
            .map(String::trim)
            .collect(Collectors.toList());

    // ===== 2) Leer JSON plano =====
    Path rutaJson = Paths.get(System.getProperty("user.dir"), nombreArchivo);
    if (!Files.exists(rutaJson)) throw new Exception("[OPF] No existe el JSON: " + rutaJson.toAbsolutePath());

    String json = Files.readString(rutaJson, StandardCharsets.UTF_8).trim();
    Map<String,String> kv = JsonUtils.parseFlatJsonToMap(json);
    System.out.println("[JSON] Campos: " + kv.size());

    // ===== 3) Iterar por bloque (posición) =====
    int bloques = Math.min(ids.size(), Math.max(
            countBlocks(kv, "OPF numeroDeclaracion_"),
            countBlocks(kv, "OPF fechaDeclaracion_")
    ));
    if (bloques == 0) throw new Exception("[OPF] No se detectaron bloques en el JSON (OPF numeroDeclaracion_n).");

    for (int i = 0; i < bloques; i++) {
        String id = ids.get(i);              // "1".."5"
        String sufijo = "_" + (i + 1);       // "_1", "_2", ...

        // ===== 3.1 Datos mínimos del bloque =====
        String numeroDeclaracion = kv.get("OPF numeroDeclaracion" + sufijo);
        String fechaDeclaracion  = kv.get("OPF fechaDeclaracion"  + sufijo);
        if (numeroDeclaracion == null || numeroDeclaracion.isBlank())
            throw new Exception("[OPF] Falta OPF numeroDeclaracion" + sufijo + " en JSON.");
        if (fechaDeclaracion == null || fechaDeclaracion.isBlank())
            throw new Exception("[OPF] Falta OPF fechaDeclaracion" + sufijo + " en JSON.");

        String fechaFormateada = DateUtils.toOracleDayMonYY(fechaDeclaracion);
        System.out.printf("[OPF] Bloque %s | ID=%s | numeroDeclaracion=%s | fechaBD=%s%n",
                sufijo, id, numeroDeclaracion, fechaFormateada);

        // ===== 3.2 Tabla/columnas por ID =====
        String tabla, idCol1, dateCol1;
        switch (id) {
            case "1":
                tabla   = "BAC_FSV1_FOR_IMPORT_BIENES";
                idCol1  = "DST_NUM_DECL_INIC";
                dateCol1= "DST_FECHA_DEC_INIC";
                break;
            case "2":
                tabla   = "DIB_FSV1_FOR_DECLA_EXPOR_BIEN";
                idCol1  = "DST_NUM_DECL_INIC";
                dateCol1= "DST_FECHA_DEC_INIC";
                break;
            case "3":
                tabla   = "BAC_FSV1_FOR_ENDEUDA_EXTER";
                idCol1  = "DST_NUM_DECL_INIC";
                dateCol1= "DST_FECHA_DEC_INIC";
                break;
            case "4":
                tabla   = "BAC_FSV1_FOR_INV_INTERNAREST";
                idCol1  = "DST_NUM_DECL_INIC";
                dateCol1= "DST_FECHA_DEC_INIC";
                break;
            case "5":
                tabla   = "BAC_FSV1_FOR_SERV_TRANS_OTROS";
                idCol1  = "DST_NUM_DECL_INIC";
                dateCol1= "DST_FECHA_DEC_INIC";
                break;
            default:
                throw new IllegalArgumentException("ID de formulario desconocido: " + id);
        }

        // ===== 3.3 SQL =====
        String sql = "SELECT JSON_OBJECT(*) AS ROW_JSON " +
                "FROM " + tabla + " " +
                "WHERE " + idCol1  + " LIKE '%" + numeroDeclaracion + "%' " +
                "AND "   + dateCol1+ " = '" + fechaFormateada + "' " +
                "FETCH FIRST 1 ROWS ONLY";
        System.out.println("[BD] SQL -> " + sql);

        // ===== 3.4 Ejecutar con tu agente =====
        Agent dbAgent   = AgentsManager.getOrCreateAgent(agentName);
        StepResult db   = dbAgent.runWithResult("query", new Object[]{sql});
        if (db == null) throw new Exception("[BD] StepResult nulo.");
        getScenarioContext().saveLastStepResult(db, varName);   // por si luego lo necesitas

        String rowJson = String.valueOf(db.getFieldValue("ROW_JSON"));
        if (rowJson == null || rowJson.isBlank() || "null".equalsIgnoreCase(rowJson)) {
            // a veces el alias viene en minúsculas
            rowJson = String.valueOf(db.getFieldValue("row_json"));
        }
        if (rowJson == null || rowJson.isBlank() || "null".equalsIgnoreCase(rowJson))
            throw new AssertionError("[BD] La consulta devolvió vacío para bloque " + sufijo);
        System.out.println("[BD] ROW_JSON: " + rowJson);

        // ===== 3.5 Construir el bloque de JSON a validar (solo claves OPF *_<n>) =====
        Map<String,String> kvBlock = new LinkedHashMap<>();
        kv.forEach((k,v) -> {
            if (k.startsWith("OPF ") && k.endsWith(sufijo)) {
                if (v != null && !v.isBlank()) kvBlock.put(k, v);
            }
        });

        // Overrides por campo base (sin sufijo). Ejemplo: formatear fecha
        Map<String,String> overrides = new HashMap<>();
        overrides.put("OPF fechaDeclaracion", DateUtils.toOracleDayMonYY(fechaDeclaracion));

        // ===== 3.6 Validar (contains, normalizado) =====
        String haystack = normalizeString(rowJson);
        for (Map.Entry<String,String> e : kvBlock.entrySet()) {
            String keyWithSuffix = e.getKey();             // "OPF campo_X_<n>"
            String baseKey       = keyWithSuffix.substring(0, keyWithSuffix.length() - sufijo.length());
            String candidate     = overrides.getOrDefault(baseKey, e.getValue());
            if (candidate == null || candidate.isEmpty()) continue;

            String needle     = normalizeString(candidate);
            String altNeed    = needle.replaceAll("[,.;:\\-/\\s]+", "");
            String altHay     = haystack.replaceAll("[,.;:\\-/\\s]+", "");

            if (haystack.contains(needle) || altHay.contains(altNeed)) {
                System.out.println("[OK] (" + baseKey + ") -> " + e.getValue());
            } else {
                throw new AssertionError("[BD] No se encontró el valor para "
                        + baseKey + "='" + e.getValue() + "' (comparado='" + candidate + "') en bloque " + sufijo);
            }
        }

        System.out.println("[OK] Bloque " + sufijo + " validado.");
    }
}

/* =================== Helpers =================== */

private static int countBlocks(Map<String,String> kv, String prefix) {
    int n = 0;
    while (kv.containsKey(prefix + (n + 1))) n++;
    return n;
}

/** Normaliza a mayúsculas, sin tildes, colapsa espacios */
private static String normalizeString(String s) {
    if (s == null) return "";
    String u = s.toUpperCase(Locale.ROOT);
    u = Normalizer.normalize(u, Normalizer.Form.NFD).replaceAll("\\p{M}+", "");
    u = u.replaceAll("[\\s]+", " ").trim();
    return u;
}

static class DateUtils {
    private static final DateTimeFormatter IN  = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private static final DateTimeFormatter OUT = DateTimeFormatter.ofPattern("dd-MMM-yy", Locale.ENGLISH);
    static String toOracleDayMonYY(String yyyyMMdd) {
        return LocalDate.parse(yyyyMMdd, IN).format(OUT).toUpperCase(Locale.ENGLISH);
    }
}
