@When("^Agentsit\\s+Actualizo\\s+XML\\s+\"([^\"]+)\"\\s+con\\s+nombre\\s+de\\s+(\\$\\w+)$")
public void actualizoXml(String rutaXml, String nombreParam) throws Exception {
    System.out.println("==[XML Update]==");
    System.out.println("XML path: " + rutaXml);

    // 1) Leer TXT en la raíz del proyecto
    Path txtPath = Paths.get("numeros_formularios_masivos.txt");
    List<String> numeros = Files.readAllLines(txtPath, StandardCharsets.UTF_8);
    numeros.removeIf(s -> s == null || s.trim().isEmpty());
    if (numeros.isEmpty())
        throw new IllegalStateException("El TXT está vacío: " + txtPath.toAbsolutePath());

    // 2) Cargar XML
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    dbf.setNamespaceAware(true);
    DocumentBuilder db = dbf.newDocumentBuilder();
    Document doc = db.parse(new File(rutaXml));
    doc.getDocumentElement().normalize();

    // 3) XPath (ajusta según los tags reales de tu XML)
    XPath xp = XPathFactory.newInstance().newXPath();
    String XP_NUM  = "//*[local-name()='numeroDeclaracion' or local-name()='referenceNumber']";
    String XP_FECH = "//*[local-name()='fechaDeclaracion' or local-name()='declarationDate']";

    NodeList nn = (NodeList) xp.evaluate(XP_NUM,  doc, XPathConstants.NODESET);
    NodeList nf = (NodeList) xp.evaluate(XP_FECH, doc, XPathConstants.NODESET);
    if (nn.getLength() == 0 || nf.getLength() == 0)
        throw new IllegalStateException("No se encontraron nodos de número o fecha en el XML.");

    int n = Math.min(nn.getLength(), nf.getLength());
    if (numeros.size() < n)
        throw new IllegalStateException("Faltan números en el TXT. Necesarios: " + n + ", disponibles: " + numeros.size());

    String hoy = java.time.LocalDate.now().toString();
    for (int i = 0; i < n; i++) {
        Node nNum = nn.item(i);
        Node nFec = nf.item(i);
        nNum.setTextContent(numeros.get(i));
        nFec.setTextContent(hoy);
    }

    // 4) Guardar cambios (sobreescribir y crear .bak)
    Path xmlPath = Paths.get(rutaXml);
    Path backup = Paths.get(rutaXml + ".bak");
    try {
        Files.copy(xmlPath, backup, StandardCopyOption.REPLACE_EXISTING);
        System.out.println("Backup creado en: " + backup.toAbsolutePath());
    } catch (Exception ex) {
        System.out.println("No se pudo crear backup (continuo): " + ex.getMessage());
    }

    Transformer tf = TransformerFactory.newInstance().newTransformer();
    tf.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, "yes");
    tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
    tf.transform(new javax.xml.transform.dom.DOMSource(doc), new javax.xml.transform.stream.StreamResult(new File(rutaXml)));

    System.out.println("Archivo sobrescrito: " + xmlPath.toAbsolutePath());
    System.out.println("Total nodos actualizados: " + n + " | Fecha aplicada: " + hoy);

    // ===== 5) RENOMBRAR usando el nombre leído previamente ($nombreExtraer) =====
    // nombreParam llega como "$nombreExtraer". Lo resolvemos desde el contexto.
    String nombreBase = null;

    // 5.a) Intentar ScenarioContext (usa el mismo patrón que tu step de línea 116)
    try {
        // Ejemplos según tu framework; deja el que aplique y comenta el otro:
        // nombreBase = String.valueOf(this.getScenarioContext().getAsStepResult(nombreParam));
        nombreBase = String.valueOf(this.getScenarioContext().getScenarioStepResult(nombreParam).getEvaluableValue());
    } catch (Throwable ignore) { /* sigue abajo */ }

    // 5.b) Fallback: GlobalContext (si lo usas en tu proyecto)
    if (nombreBase == null || nombreBase.equals("null")) {
        try {
            nombreBase = String.valueOf(GlobalContext.get(nombreParam));
        } catch (Throwable ignore) { /* sigue abajo */ }
    }

    // 5.c) Si aún no lo resolvimos y viene con '$', intenta quitar el '$' y buscar de nuevo
    if ((nombreBase == null || nombreBase.equals("null")) && nombreParam.startsWith("$")) {
        String key = nombreParam.substring(1);
        try {
            // nombreBase = String.valueOf(this.getScenarioContext().getAsStepResult("$" + key));
            nombreBase = String.valueOf(this.getScenarioContext().getScenarioStepResult("$" + key).getEvaluableValue());
        } catch (Throwable ignore) { /* sigue abajo */ }
        if (nombreBase == null || nombreBase.equals("null")) {
            try { nombreBase = String.valueOf(GlobalContext.get("$" + key)); } catch (Throwable ignore) {}
        }
        if (nombreBase == null || nombreBase.equals("null")) {
            try { nombreBase = String.valueOf(GlobalContext.get(key)); } catch (Throwable ignore) {}
        }
    }

    if (nombreBase == null || nombreBase.trim().isEmpty()) {
        throw new IllegalStateException("No pude resolver el valor de la variable " + nombreParam +
                ". Asegúrate de haber hecho 'read text ... into " + nombreParam + "' antes.");
    }

    // Sanitizar y construir destino en la misma carpeta
    String limpio = nombreBase.trim()
            .replaceAll("\\p{M}+", "")
            .replaceAll("[\\\\/:*?\"<>|]", "_");
    if (limpio.isEmpty())
        throw new IllegalStateException("El nombre resultante quedó vacío tras sanear: " + nombreBase);

    String original = xmlPath.getFileName().toString();
    String ext = original.contains(".") ? original.substring(original.lastIndexOf('.')) : ".xml";
    Path dir = xmlPath.getParent() == null ? Paths.get(".") : xmlPath.getParent();
    Path destino = dir.resolve(limpio + ext);

    // Evitar colisión: añade (_1), (_2), ...
    int seq = 1;
    while (Files.exists(destino)) {
        destino = dir.resolve(limpio + "(_" + seq + ")" + ext);
        seq++;
    }

    Files.move(xmlPath, destino, StandardCopyOption.REPLACE_EXISTING);
    System.out.println("XML renombrado a: " + destino.toAbsolutePath());
}
