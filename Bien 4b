// === 4.b) Construcción del nombre final (robusto) ===
String raw = nombreBase.trim();
System.out.println("RAW (extraído): " + raw);

// Quitar cualquier 'xml' al final (".xml", "_xml", " xml", "-xml", etc.)
String noExt = raw.replaceFirst("(?i)([._\\s-]?xml)+$", "");
System.out.println("Después de quitar xml: " + noExt);

// Dividir en prefijo y última parte por el último "_"
int idx = noExt.lastIndexOf('_');
String left  = (idx > 0) ? noExt.substring(0, idx) : noExt;
String right = (idx > 0) ? noExt.substring(idx + 1) : "";
System.out.println("LEFT  (antes): " + left);
System.out.println("RIGHT (antes): " + right);

// Asegurar que ninguna parte termine en 'xml' residual
left  = left.replaceFirst("(?i)([._\\s-]?xml)+$", "").trim();
right = right.replaceFirst("(?i)([._\\s-]?xml)+$", "").trim();
System.out.println("LEFT  limpio: " + left);
System.out.println("RIGHT limpio: " + right);

// Limpieza de caracteres (solo letras, números, _ y -)
java.util.function.Function<String,String> clean = s ->
        java.text.Normalizer.normalize(s, java.text.Normalizer.Form.NFD)
                .replaceAll("\\p{M}+", "")
                .replaceAll("[^A-Za-z0-9_-]", "")
                .replaceFirst("^_+", "")       // quitar '_' iniciales
                .replaceFirst("_+$", "");      // quitar '_' finales

String baseClean  = clean.apply(left);
String rightClean = clean.apply(right);

// Construcción final sin “_” colgantes
String nombreFinal = baseClean + "_0001" + (rightClean.isEmpty() ? "" : "_" + rightClean) + ".xml";
System.out.println("NOMBRE FINAL: " + nombreFinal);

// Directorio de salida y Path destino
Path dir = (plantillaPath.getParent() == null) ? Paths.get(".") : plantillaPath.getParent();
Path destino = dir.resolve(nombreFinal);
