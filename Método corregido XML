import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@When("^Consulto datos desde el JSON y la BD con (\\w+)$")
public void cargandoDatosOPF(String agentName, String nombreArchivo, String varName) throws Exception {

    boolean failAtEnd = Boolean.parseBoolean(System.getProperty("opf.failAtEnd", "true"));
    List<String> globalErrors = new ArrayList<>();

    // ================= 1) Leer archivos base =================
    Path rutaIds = Paths.get(System.getProperty("user.dir"), "identificador_generadoXML.txt");
    if (!Files.exists(rutaIds))
        throw new Exception("[OPF] No existe el archivo de identificador: " + rutaIds.toAbsolutePath());

    Path rutaNums = Paths.get(System.getProperty("user.dir"), "numerosFormularioXML.txt");
    if (!Files.exists(rutaNums))
        throw new Exception("[OPF] No existe el archivo de números de formulario: " + rutaNums.toAbsolutePath());

    List<String> ids = Files.readAllLines(rutaIds, StandardCharsets.UTF_8)
            .stream()
            .filter(s -> s != null && !s.isBlank())
            .map(s -> s.replaceAll("[^0-9]", ""))
            .collect(Collectors.toList());

    if (ids.isEmpty()) throw new Exception("[OPF] Archivo de IDs vacío.");

    List<String> numerosDec = Files.readAllLines(rutaNums, StandardCharsets.UTF_8)
            .stream()
            .filter(s -> s != null && !s.isBlank())
            .collect(Collectors.toList());

    // ================= 2) Leer JSON plano =================
    Path rutaJson = Paths.get(System.getProperty("user.dir"), nombreArchivo);
    if (!Files.exists(rutaJson))
        throw new Exception("[OPF] No existe el JSON: " + rutaJson.toAbsolutePath());

    String json = Files.readString(rutaJson, StandardCharsets.UTF_8).trim();
    Map<String, String> kv = JsonUtils.toMap(json);
    System.out.println("[JSON] Campos cargados: " + kv.size());

    // ================= 3) Iterar por bloques =================
    int bloques = Math.max(ids.size(), numerosDec.size());
    if (bloques == 0) throw new Exception("[OPF] No se detectaron bloques en el JSON.");

    for (int i = 0; i < bloques; i++) {
        String sufijo = "_" + (i + 1);
        String id = ids.get(i);
        String numeroDeclaracion = kv.get("OPF_numeroDeclaracion" + sufijo);
        String fechaDeclaracion = kv.get("OPF_fechaDeclaracion" + sufijo);

        if (numeroDeclaracion == null || fechaDeclaracion == null
                || numeroDeclaracion.isBlank() || fechaDeclaracion.isBlank()) {
            String msg = "[OPF] Faltan datos mínimos para bloque " + sufijo
                    + " en JSON: " + numeroDeclaracion + " / " + fechaDeclaracion;
            System.out.println(msg);
            globalErrors.add(msg);
            continue;
        }

        // ================= 3.2 Determinar tabla =================
        String tabla, idCol1, dateCol1;
        switch (id) {
            case "1":
                tabla = "BAC_FMV1_FOR_INV_INTERNAS";
                idCol1 = "D19S_NUM_DEC_JIINC";
                dateCol1 = "D19S_FECHA_DEC_JIINC";
                break;
            case "2":
                tabla = "BAC_FMV1_FOR_INV_EXTERNA";
                idCol1 = "D19E_NUM_DEC_JIINC";
                dateCol1 = "D19E_FECHA_DEC_JIINC";
                break;
            case "3":
                tabla = "BAC_FMV1_FOR_DEUDA_EXTER";
                idCol1 = "DEE_NUM_DEC_JIINC";
                dateCol1 = "DEE_FECHA_DEC_JIINC";
                break;
            case "4":
                tabla = "BAC_FMV1_FOR_IMPORT_BIENES";
                idCol1 = "DIMP_NUM_DEC_JIINC";
                dateCol1 = "DIMP_FECHA_DEC_JIINC";
                break;
            case "5":
                tabla = "BAC_FMV1_FOR_SERV_TRANSF_OTROS";
                idCol1 = "DST_NUM_DEC_JIINC";
                dateCol1 = "DST_FECHA_DEC_JIINC";
                break;
            default:
                throw new IllegalArgumentException("Identificador de formulario desconocido: " + id);
        }

        String fechaFormateada = DateUtils.toOracleDayMonthYear(fechaDeclaracion);

        // ================= 3.3 SQL =================
        String sql = String.format(
                "SELECT JSON_OBJECT(*) AS ROW_JSON FROM %s WHERE %s LIKE '%%%s%%' AND %s = '%s' FETCH FIRST 1 ROWS ONLY",
                tabla, idCol1, numeroDeclaracion, dateCol1, fechaFormateada);

        System.out.println("[BD] Consulta generada: " + sql);

        // ================= 3.4 Ejecutar consulta =================
        StepResult db;
        try {
            Agent dbAgent = AgentsManager.getInstance().getOrCreateAgent(agentName);
            db = dbAgent.runMethod("query", new Object[]{sql});
        } catch (Exception ex) {
            String msg = "[BD] Error ejecutando query bloque " + sufijo + ": " + ex.getMessage();
            System.out.println(msg);
            globalErrors.add(msg);
            continue;
        }

        if (db == null) {
            String msg = "[BD] Resultado nulo bloque " + sufijo;
            System.out.println(msg);
            globalErrors.add(msg);
            continue;
        }

        String rowJson = String.valueOf(db.getFieldValue("ROW_JSON"));
        if (rowJson == null || rowJson.isBlank() || "null".equalsIgnoreCase(rowJson)) {
            String msg = "[BD] Respuesta vacía bloque " + sufijo;
            System.out.println(msg);
            globalErrors.add(msg);
            continue;
        }

        getScenarioContext().saveLastStepResult(db, varName);

        // ================= 3.6 Validación =================
        int idx = i + 1;
        List<Map.Entry<String, String>> kvBlock = kv.entrySet().stream()
                .filter(e -> e.getKey().startsWith("OPF_") && e.getKey().endsWith("_" + idx))
                .filter(e -> e.getValue() != null && !e.getValue().isBlank())
                .collect(Collectors.toList());

        String jsonDb = rowJson;
        List<String> oks = new ArrayList<>();
        List<String> fails = new ArrayList<>();

        System.out.println("===== BLOQUE " + idx + " =====");
        System.out.println("JSON busca númeroDeclaración=" + numeroDeclaracion
                + " / fecha=" + fechaDeclaracion + " (Oracle=" + fechaFormateada + ")");

        for (Map.Entry<String, String> e : kvBlock) {
            String keyFull = e.getKey();
            String baseKey = keyFull.replaceAll("_[0-9]+$", "");
            String value = e.getValue();

            if (baseKey.equalsIgnoreCase("OPF_fechaDeclaracion")) {
                value = fechaFormateada;
            }

            boolean match = containsJsonValue(jsonDb, value);
            if (match) oks.add(baseKey + " = " + value);
            else fails.add(baseKey + " = " + value);
        }

        System.out.println(String.format("[RESUMEN] Bloque %d → OK:%d  FAIL:%d", idx, oks.size(), fails.size()));
        if (!oks.isEmpty()) {
            System.out.println("[OK] Campos encontrados:");
            oks.forEach(s -> System.out.println("  ✔ " + s));
        }
        if (!fails.isEmpty()) {
            System.out.println("[FAIL] Campos faltantes:");
            fails.forEach(s -> System.out.println("  ✖ " + s));
            globalErrors.addAll(fails);
        }
    }

    if (globalErrors.isEmpty()) {
        System.out.println("\n===== RESUMEN FINAL: TODO OK =====");
    } else {
        System.out.println("\n===== RESUMEN FINAL: HAY FALTANTES =====");
        globalErrors.forEach(s -> System.out.println(" - " + s));
        if (failAtEnd)
            throw new AssertionError("Existen " + globalErrors.size() + " validaciones fallidas. Revisa el log.");
    }
}

// ================================================================
// Helpers
// ================================================================
private static boolean containsJsonValue(String json, String rawValue) {
    if (rawValue == null) return false;
    String v = rawValue.trim();
    if (v.isEmpty()) return false;

    String quoted = "\"" + Pattern.quote(v) + "\"";
    if (Pattern.compile(quoted).matcher(json).find()) return true;

    String bare = "(?<![\\p{Alnum}_\\.\\-])" + Pattern.quote(v) + "(?![\\p{Alnum}_\\.\\-])";
    return Pattern.compile(bare).matcher(json).find();
}

// ================================================================
// Date Utils
// ================================================================
static class DateUtils {
    private static final DateTimeFormatter IN  =
            DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private static final DateTimeFormatter OUT =
            DateTimeFormatter.ofPattern("dd-MMM-yy", Locale.ENGLISH);

    static String toOracleDayMonthYear(String yyyyMMdd) {
        return LocalDate.parse(yyyyMMdd, IN).format(OUT).toUpperCase(Locale.ENGLISH);
    }

    static String toOracleDayMonYY(String yyyyMMdd) {
        return toOracleDayMonthYear(yyyyMMdd);
    }
}
