@When("^Agentsit\\s+Actualizo\\s+XML\\s+\"([^\"]+)\"\\s+con\\s+numeros?\\s+del\\s+txt\\s+y\\s+fecha\\s+actual$")
public void actualizoXml(String rutaXml) throws Exception {
    System.out.println("==[XML Update]==");
    System.out.println("XML path: " + rutaXml);

    // 1) Leer TXT en la raíz del proyecto
    Path txtPath = Paths.get("numeros_formularios_masivos.txt");
    List<String> numeros = Files.readAllLines(txtPath, StandardCharsets.UTF_8);
    numeros.removeIf(s -> s == null || s.trim().isEmpty());

    if (numeros.isEmpty()) {
        throw new IllegalStateException("El TXT está vacío: " + txtPath.toAbsolutePath());
    }

    // 2) Cargar XML
    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    dbf.setNamespaceAware(true);
    DocumentBuilder db = dbf.newDocumentBuilder();
    Document doc = db.parse(new File(rutaXml));
    doc.getDocumentElement().normalize();

    // 3) XPath (ajusta según los tags reales de tu XML)
    XPath xp = XPathFactory.newInstance().newXPath();
    String XP_NUM  = "//*[local-name()='numeroDeclaracion' or local-name()='referenceNumber']";
    String XP_FECH = "//*[local-name()='fechaDeclaracion' or local-name()='declarationDate']";

    NodeList nn = (NodeList) xp.evaluate(XP_NUM,  doc, XPathConstants.NODESET);
    NodeList nf = (NodeList) xp.evaluate(XP_FECH, doc, XPathConstants.NODESET);

    if (nn.getLength() == 0 || nf.getLength() == 0) {
        throw new IllegalStateException("No se encontraron nodos de número o fecha en el XML.");
    }

    int n = Math.min(nn.getLength(), nf.getLength());
    if (numeros.size() < n) {
        throw new IllegalStateException("Faltan números en el TXT. Necesarios: " + n + ", disponibles: " + numeros.size());
    }

    String hoy = LocalDate.now().toString();
    for (int i = 0; i < n; i++) {
        Node nNum = nn.item(i);
        Node nFec = nf.item(i);

        nNum.setTextContent(numeros.get(i));
        nFec.setTextContent(hoy);
    }

    // 4) Guardar cambios (sobreescribir y crear .bak)
    Path xmlPath = Paths.get(rutaXml);
    Path backup = Paths.get(rutaXml + ".bak");

    try {
        Files.copy(xmlPath, backup, StandardCopyOption.REPLACE_EXISTING);
        System.out.println("Backup creado en: " + backup.toAbsolutePath());
    } catch (Exception ex) {
        System.out.println("No se pudo crear backup (continuo): " + ex.getMessage());
    }

    Transformer tf = TransformerFactory.newInstance().newTransformer();
    tf.setOutputProperty(OutputKeys.INDENT, "yes");
    tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");

    // Sobrescribir el archivo original
    tf.transform(new DOMSource(doc), new StreamResult(new File(rutaXml)));

    System.out.println("Archivo sobrescrito: " + xmlPath.toAbsolutePath());
    System.out.println("Total nodos actualizados: " + n + " | Fecha aplicada: " + hoy);
}
