@When("^Consulto datos desde el JSON y la BD con (\\w+)$")
public void cargandoDatosOPF(String agentName, String nombreArchivo, String varName) throws Exception {

    boolean failAtEnd = Boolean.parseBoolean(System.getProperty("opf.failAtEnd", "true"));
    List<String> globalErrors = new ArrayList<>();

    // === Leer identificadores
    Path rutaIds = Paths.get(System.getProperty("user.dir"), "identificador_generadoXML.txt");
    if (!Files.exists(rutaIds))
        throw new Exception("[OPF] No existe el archivo de identificador: " + rutaIds.toAbsolutePath());
    List<String> ids = Files.readAllLines(rutaIds, StandardCharsets.UTF_8)
            .stream()
            .filter(s -> s != null && !s.isBlank())
            .map(s -> s.replaceAll("[^0-9]", ""))
            .collect(Collectors.toList());
    if (ids.isEmpty()) throw new Exception("[OPF] Archivo de IDs vacío.");

    // === Leer archivo JSON
    Path rutaJson = Paths.get(System.getProperty("user.dir"), nombreArchivo);
    if (!Files.exists(rutaJson))
        throw new Exception("[OPF] No existe el JSON: " + rutaJson.toAbsolutePath());
    String json = Files.readString(rutaJson, StandardCharsets.UTF_8).trim();
    Map<String, String> kv = JsonUtils.toMap(json);

    System.out.println("[JSON] Campos cargados: " + kv.size());

    for (int i = 0; i < ids.size(); i++) {
        String sufijo = "[" + (i + 1) + "]";
        String id = ids.get(i);
        String numeroDeclaracion = kv.get("OPF.numeroDeclaracion" + sufijo);
        String fechaDeclaracion = kv.get("OPF.fechaDeclaracion" + sufijo);

        if (numeroDeclaracion == null || fechaDeclaracion == null
                || numeroDeclaracion.isBlank() || fechaDeclaracion.isBlank()) {
            String msg = "[OPF] Faltan datos mínimos para bloque " + sufijo;
            System.out.println(msg);
            globalErrors.add(msg);
            continue;
        }

        // === Determinar tabla
        String tabla, idCol1, dateCol1;
        switch (id) {
            case "1":
                tabla = "BAC_FMV1_FOR_INV_INTERNAS";
                idCol1 = "D19S_NUM_DEC_JIINC";
                dateCol1 = "D19S_FECHA_DEC_JIINC";
                break;
            case "2":
                tabla = "BAC_FMV1_FOR_INV_EXTERNA";
                idCol1 = "D19E_NUM_DEC_JIINC";
                dateCol1 = "D19E_FECHA_DEC_JIINC";
                break;
            case "3":
                tabla = "BAC_FMV1_FOR_DEUDA_EXTER";
                idCol1 = "DEE_NUM_DEC_JIINC";
                dateCol1 = "DEE_FECHA_DEC_JIINC";
                break;
            case "4":
                tabla = "BAC_FMV1_FOR_IMPORT_BIENES";
                idCol1 = "DIMP_NUM_DEC_JIINC";
                dateCol1 = "DIMP_FECHA_DEC_JIINC";
                break;
            case "5":
                tabla = "BAC_FMV1_FOR_SERV_TRANSF_OTROS";
                idCol1 = "DST_NUM_DEC_JIINC";
                dateCol1 = "DST_FECHA_DEC_JIINC";
                break;
            default:
                throw new IllegalArgumentException("Identificador de formulario desconocido: " + id);
        }

        // ✅ CORRECCIÓN: conversión de fecha Oracle
        String fechaFormateada = DateUtils.toOracleDayMonthYear(fechaDeclaracion);

        String sql = String.format(
                "SELECT JSON_OBJECT(*) AS ROW_JSON FROM %s WHERE %s LIKE '%%%s%%' AND %s = '%s' FETCH FIRST 1 ROWS ONLY",
                tabla, idCol1, numeroDeclaracion, dateCol1, fechaFormateada);

        System.out.println("[BD] Consulta generada: " + sql);

        StepResult db;
        try {
            Agent dbAgent = AgentsManager.getInstance().getOrCreateAgent(agentName);
            db = dbAgent.runMethod("query", new Object[]{sql});
        } catch (Exception ex) {
            String msg = "[BD] Error ejecutando query bloque " + sufijo + ": " + ex.getMessage();
            globalErrors.add(msg);
            continue;
        }

        if (db == null) {
            String msg = "[BD] Resultado nulo bloque " + sufijo;
            globalErrors.add(msg);
            continue;
        }

        String rowJson = String.valueOf(db.getFieldValue("ROW_JSON"));
        if (rowJson == null || rowJson.isBlank() || "null".equalsIgnoreCase(rowJson)) {
            String msg = "[BD] Respuesta vacía bloque " + sufijo;
            globalErrors.add(msg);
            continue;
        }

        getScenarioContext().saveLastStepResult(db, varName);

        Map<String, String> kvBlock = new LinkedHashMap<>();
        kv.forEach((k, v) -> {
            if (k.startsWith("OPF.") && k.endsWith(sufijo) && v != null && !v.isBlank())
                kvBlock.put(k, v);
        });

        List<String> oks = new ArrayList<>();
        List<String> fails = new ArrayList<>();

        for (Map.Entry<String, String> e : kvBlock.entrySet()) {
            String keyWithSuffix = e.getKey();
            String value = e.getValue();
            String baseKey = keyWithSuffix.substring(0, keyWithSuffix.length() - sufijo.length());

            // === Comparación flexible
            boolean found = containsTextFlexible(rowJson, value);

            if (found) oks.add(baseKey);
            else fails.add(baseKey);
        }

        System.out.println(String.format("[RESUMEN] Bloque %s → OK:%d  FAIL:%d", sufijo, oks.size(), fails.size()));
        if (!fails.isEmpty()) globalErrors.addAll(fails);
    }

    // === Resumen final
    if (globalErrors.isEmpty()) {
        System.out.println("\n===== RESUMEN FINAL: TODO OK =====");
    } else {
        System.out.println("\n===== RESUMEN FINAL: HAY FALTANTES =====");
        globalErrors.forEach(s -> System.out.println(" - " + s));
        if (failAtEnd)
            throw new AssertionError("Existen " + globalErrors.size() + " validaciones fallidas. Revisa el log.");
    }
}

/** Comparación flexible: ignora mayúsculas, tildes y espacios */
private static boolean containsTextFlexible(String jsonHaystack, String rawValue) {
    if (jsonHaystack == null || rawValue == null) return false;
    String hay = normalizeText(jsonHaystack);
    String nee = normalizeText(rawValue);
    return !nee.isEmpty() && hay.contains(nee);
}

/** Normaliza texto quitando tildes, mayúsculas y espacios */
private static String normalizeText(String s) {
    if (s == null) return "";
    String u = Normalizer.normalize(s, Normalizer.Form.NFD)
            .replaceAll("\\p{M}+", ""); // quita tildes
    u = u.toUpperCase(Locale.ROOT);
    u = u.replaceAll("\\s+", "");      // quita espacios
    return u;
}

imports -------||---------

import java.text.Normalizer;
import java.util.Locale;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.*;
import java.util.stream.Collectors;
